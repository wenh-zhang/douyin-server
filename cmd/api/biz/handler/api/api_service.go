// Code generated by hertz generator.

package api

import (
	"context"
	"douyin/cmd/api/biz/model/api"
	"douyin/cmd/api/global"
	"douyin/cmd/api/pkg"
	"douyin/shared/constant"
	"douyin/shared/errno"
	"douyin/shared/kitex_gen/interaction"
	"douyin/shared/kitex_gen/message"
	"douyin/shared/kitex_gen/sociality"
	"douyin/shared/kitex_gen/user"
	"douyin/shared/kitex_gen/video"
	"douyin/shared/util"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
)

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinUserRegisterResponse)
	var req api.DouyinUserRegisterRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	res, err := global.UserClient.Register(ctx, &user.DouyinUserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		hlog.Errorf("call rpc user err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCUserErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.Token = res.Token
	resp.UserID = res.UserId
	pkg.SendResponse(c, resp)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinUserLoginResponse)
	var req api.DouyinUserLoginRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}

	res, err := global.UserClient.Login(ctx, &user.DouyinUserLoginRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		hlog.Errorf("call rpc user err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCUserErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.Token = res.Token
	resp.UserID = res.UserId
	pkg.SendResponse(c, resp)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinUserResponse)
	var req api.DouyinUserRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.UserClient.BatchGetUserInfo(context.Background(), &user.DouyinBatchGetUserRequest{
		LocalUserId:      userId.(int64),
		TargetUserIdList: []int64{req.UserID},
	})
	if err != nil {
		hlog.Errorf("call rpc user err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCUserErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.User = pkg.User(res.UserList[0])
	pkg.SendResponse(c, resp)
}

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinFeedResponse)
	var req api.DouyinFeedRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	rpcReq := new(video.DouyinFeedRequest)
	claims, err := util.NewJWT(constant.TokenSignedKey).ParseToken(req.Token)
	if err == nil {
		rpcReq.UserId = claims.UserID
	}
	if req.LatestTime == 0 {
		req.LatestTime = time.Now().Unix()
	}
	rpcReq.LatestTime = req.LatestTime

	res, err := global.VideoClient.Feed(context.Background(), rpcReq)
	if err != nil {
		hlog.Errorf("call rpc video err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCVideoErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.VideoList = pkg.Videos(res.VideoList)
	resp.NextTime = res.NextTime
	pkg.SendResponse(c, resp)
}

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinPublishActionResponse)
	var req api.DouyinPublishActionRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	fh, err := c.FormFile("data")
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	playURL, coverURL, err := global.UploadService.UploadVideo(fh)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ServiceErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	res, err := global.VideoClient.Publish(context.Background(), &video.DouyinPublishActionRequest{
		UserId:   userId.(int64),
		PlayUrl:  playURL,
		CoverUrl: coverURL,
		Title:    req.Title,
	})
	if err != nil {
		hlog.Errorf("call rpc video err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCVideoErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	pkg.SendResponse(c, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinPublishListResponse)
	var req api.DouyinPublishListRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.VideoClient.GetPublishedVideoList(context.Background(), &video.DouyinGetPublishListRequest{
		LocalUserId:  userId.(int64),
		TargetUserId: req.UserID,
	})
	if err != nil {
		hlog.Errorf("call rpc video err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCVideoErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.VideoList = pkg.Videos(res.VideoList)
	pkg.SendResponse(c, resp)
}

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinFavoriteActionResponse)
	var req api.DouyinFavoriteActionRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.InteractionClient.Favorite(context.Background(), &interaction.DouyinFavoriteActionRequest{
		UserId:     userId.(int64),
		VideoId:    req.VideoID,
		ActionType: req.ActionType,
	})
	if err != nil {
		hlog.Errorf("call rpc interaction err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCInteractionErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	pkg.SendResponse(c, resp)
}

// FavoriteList .
// @router /douyin/favorite/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinFavoriteListResponse)
	var req api.DouyinFavoriteListRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.VideoClient.GetFavoriteVideoList(context.Background(), &video.DouyinGetFavoriteListRequest{
		LocalUserId:  userId.(int64),
		TargetUserId: req.UserID,
	})
	if err != nil {
		hlog.Errorf("call rpc video err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCVideoErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.VideoList = pkg.Videos(res.VideoList)
	pkg.SendResponse(c, resp)
}

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinCommentActionResponse)
	var req api.DouyinCommentActionRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.InteractionClient.Comment(context.Background(), &interaction.DouyinCommentActionRequest{
		UserId:      userId.(int64),
		VideoId:     req.VideoID,
		CommentText: req.CommentText,
		ActionType:  req.ActionType,
		CommentId:   req.CommentID,
	})
	if err != nil {
		hlog.Errorf("call rpc interaction err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCInteractionErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.Comment = pkg.Comment(res.Comment)
	pkg.SendResponse(c, resp)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinCommentListResponse)
	var req api.DouyinCommentListRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.InteractionClient.GetCommentList(context.Background(), &interaction.DouyinGetCommentListRequest{
		UserId:  userId.(int64),
		VideoId: req.VideoID,
	})
	if err != nil {
		hlog.Errorf("call rpc interaction err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCInteractionErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.CommentList = pkg.Comments(res.CommentList)
	pkg.SendResponse(c, resp)
}

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinRelationActionResponse)
	var req api.DouyinRelationActionRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.SocialityClient.Relation(context.Background(), &sociality.DouyinRelationActionRequest{
		LocalUserId:  userId.(int64),
		TargetUserId: req.ToUserID,
		ActionType:   req.ActionType,
	})
	if err != nil {
		hlog.Errorf("call rpc sociality err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCSocialityErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	pkg.SendResponse(c, resp)
}

// FollowList .
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinRelationFollowListResponse)
	var req api.DouyinRelationFollowListRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.UserClient.GetRelationFollowList(context.Background(), &user.DouyinGetRelationFollowListRequest{
		LocalUserId:  userId.(int64),
		TargetUserId: req.UserID,
	})
	if err != nil {
		hlog.Errorf("call rpc user err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCUserErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.UserList = pkg.Users(res.UserList)
	pkg.SendResponse(c, resp)
}

// FollowerList .
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinRelationFollowerListResponse)
	var req api.DouyinRelationFollowerListRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.UserClient.GetRelationFollowerList(context.Background(), &user.DouyinGetRelationFollowerListRequest{
		LocalUserId:  userId.(int64),
		TargetUserId: req.UserID,
	})
	if err != nil {
		hlog.Errorf("call rpc user err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCUserErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.UserList = pkg.Users(res.UserList)
	pkg.SendResponse(c, resp)
}

// FriendList .
// @router /douyin/relation/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinRelationFriendListResponse)
	var req api.DouyinRelationFriendListRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.UserClient.GetRelationFriendList(context.Background(), &user.DouyinGetRelationFriendListRequest{
		LocalUserId:  userId.(int64),
		TargetUserId: req.UserID,
	})
	if err != nil {
		hlog.Errorf("call rpc user err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCUserErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.UserList = pkg.FriendUsers(res.UserList)
	pkg.SendResponse(c, resp)
}

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinMessageChatResponse)
	var req api.DouyinMessageChatRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.MessageClient.GetMessageHistory(context.Background(), &message.DouyinGetMessageChatRequest{
		LocalUserId:  userId.(int64),
		TargetUserId: req.ToUserID,
		PreMsgTime:   req.PreMsgTime,
	})
	if err != nil {
		hlog.Errorf("call rpc message err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCMessageErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.MessageList = pkg.Messages(res.MessageList)
	pkg.SendResponse(c, resp)
}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	resp := new(api.DouyinMessageActionResponse)
	var req api.DouyinMessageActionRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		resp.StatusCode, resp.StatusMsg = errno.ParamErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	userId, _ := c.Get(constant.TokenUserIdentifyKey)
	res, err := global.MessageClient.SendMessage(context.Background(), &message.DouyinMessageActionRequest{
		LocalUserId:  userId.(int64),
		TargetUserId: req.ToUserID,
		ActionType:   req.ActionType,
		Content:      req.Content,
	})
	if err != nil {
		hlog.Errorf("call rpc message err:%s", err.Error())
		resp.StatusCode, resp.StatusMsg = errno.RPCMessageErr.ErrorDetail()
		pkg.SendResponse(c, resp)
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	pkg.SendResponse(c, resp)
}
