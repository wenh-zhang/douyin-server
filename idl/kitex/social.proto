syntax = "proto3";
package douyin.extra.second;
option go_package = "social";
import "idl/kitex/core.proto";

message douyin_relation_action_request {
  int64 user_id = 1; // 本地用户id
  int64 to_user_id = 2; // 对方用户id
  int32 action_type = 3; // 1-关注，2-取消关注
}

message douyin_relation_action_response {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
}

message douyin_relation_follow_list_request {
  int64 query_user_id = 1; // 用户id
  int64 user_id = 2; // 本地用户id
}

message douyin_relation_follow_list_response {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  repeated core.User user_list = 3; // 用户信息列表
}

message douyin_relation_follower_list_request {
  int64 query_user_id = 1; // 用户id
  int64 user_id = 2; // 本地用户id
}

message douyin_relation_follower_list_response {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  repeated core.User user_list = 3; // 用户列表
}

message douyin_relation_friend_list_request {
  int64 user_id = 1; // 用户id
}

message douyin_relation_friend_list_response {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  repeated FriendUser user_list = 3; // 用户列表
}

message douyin_message_action_request {
  int64 user_id = 1; // 本地用户id
  int64 to_user_id = 2; // 对方用户id
  int32 action_type = 3; // 1-发送消息
  string content = 4; //消息内容
}

message douyin_message_action_response {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
}

message douyin_message_chat_request{
  int64 user_id = 1; // 本地用户id
  int64 to_user_id = 2; // 对方用户id
}

message douyin_message_chat_response {
  int32 status_code = 1; // 状态码，0-成功，其他值-失败
  optional string status_msg = 2; // 返回状态描述
  repeated Message message_list = 3; // 消息列表
}

message Message {
  int64 id = 1; // 消息id
  int64 to_user_id = 2; // 该消息接收者的id
  int64 from_user_id =3; // 该消息发送者的id
  string content = 4; // 消息内容
  optional string create_time = 5; // 消息创建时间
}

message FriendUser {
  core.User user = 1;
  optional string message = 2; // 和该好友的最新聊天消息
  int64 msgType = 3; // message消息的类型，0 => 当前请求用户接收的消息， 1 => 当前请求用户发送的消息
}

service SocialService {
  rpc RelationAction (douyin_relation_action_request) returns (douyin_relation_action_response) {}
  rpc RelationFollowList (douyin_relation_follow_list_request) returns (douyin_relation_follow_list_response) {}
  rpc RelationFollowerList (douyin_relation_follower_list_request) returns (douyin_relation_follower_list_response) {}
  rpc RelationFriendList (douyin_relation_friend_list_request) returns (douyin_relation_friend_list_response) {}
  rpc MessageAction (douyin_message_action_request) returns (douyin_message_action_response) {}
  rpc MessageChat (douyin_message_chat_request) returns (douyin_message_chat_response) {}
}
