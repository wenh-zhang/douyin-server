// Code generated by thriftgo (0.2.5). DO NOT EDIT.

package errno

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type Code int64

const (
	Code_Success              Code = 0
	Code_ParamsErr            Code = 1
	Code_ServiceErr           Code = 2
	Code_RPCInteractionErr    Code = 10000
	Code_InteractionServerErr Code = 10001
	Code_RPCSocialityErr      Code = 20000
	Code_SocialityServerErr   Code = 20001
	Code_RPCUserErr           Code = 30000
	Code_UserServerErr        Code = 30001
	Code_UserAlreadyExistErr  Code = 30002
	Code_UserNotFoundErr      Code = 30003
	Code_AuthorizeFailErr     Code = 30004
	Code_RPCVideoErr          Code = 40000
	Code_VideoServerErr       Code = 40001
	Code_RPCMessageErr        Code = 50000
	Code_MessageServerErr     Code = 50001
)

func (p Code) String() string {
	switch p {
	case Code_Success:
		return "Success"
	case Code_ParamsErr:
		return "ParamsErr"
	case Code_ServiceErr:
		return "ServiceErr"
	case Code_RPCInteractionErr:
		return "RPCInteractionErr"
	case Code_InteractionServerErr:
		return "InteractionServerErr"
	case Code_RPCSocialityErr:
		return "RPCSocialityErr"
	case Code_SocialityServerErr:
		return "SocialityServerErr"
	case Code_RPCUserErr:
		return "RPCUserErr"
	case Code_UserServerErr:
		return "UserServerErr"
	case Code_UserAlreadyExistErr:
		return "UserAlreadyExistErr"
	case Code_UserNotFoundErr:
		return "UserNotFoundErr"
	case Code_AuthorizeFailErr:
		return "AuthorizeFailErr"
	case Code_RPCVideoErr:
		return "RPCVideoErr"
	case Code_VideoServerErr:
		return "VideoServerErr"
	case Code_RPCMessageErr:
		return "RPCMessageErr"
	case Code_MessageServerErr:
		return "MessageServerErr"
	}
	return "<UNSET>"
}

func CodeFromString(s string) (Code, error) {
	switch s {
	case "Success":
		return Code_Success, nil
	case "ParamsErr":
		return Code_ParamsErr, nil
	case "ServiceErr":
		return Code_ServiceErr, nil
	case "RPCInteractionErr":
		return Code_RPCInteractionErr, nil
	case "InteractionServerErr":
		return Code_InteractionServerErr, nil
	case "RPCSocialityErr":
		return Code_RPCSocialityErr, nil
	case "SocialityServerErr":
		return Code_SocialityServerErr, nil
	case "RPCUserErr":
		return Code_RPCUserErr, nil
	case "UserServerErr":
		return Code_UserServerErr, nil
	case "UserAlreadyExistErr":
		return Code_UserAlreadyExistErr, nil
	case "UserNotFoundErr":
		return Code_UserNotFoundErr, nil
	case "AuthorizeFailErr":
		return Code_AuthorizeFailErr, nil
	case "RPCVideoErr":
		return Code_RPCVideoErr, nil
	case "VideoServerErr":
		return Code_VideoServerErr, nil
	case "RPCMessageErr":
		return Code_RPCMessageErr, nil
	case "MessageServerErr":
		return Code_MessageServerErr, nil
	}
	return Code(0), fmt.Errorf("not a valid Code string")
}

func CodePtr(v Code) *Code { return &v }
func (p *Code) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Code(result.Int64)
	return
}

func (p *Code) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
