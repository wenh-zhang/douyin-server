// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	"douyin/shared/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":                kitex.NewMethodInfo(registerHandler, newUserServiceRegisterArgs, newUserServiceRegisterResult, false),
		"Login":                   kitex.NewMethodInfo(loginHandler, newUserServiceLoginArgs, newUserServiceLoginResult, false),
		"BatchGetUserInfo":        kitex.NewMethodInfo(batchGetUserInfoHandler, newUserServiceBatchGetUserInfoArgs, newUserServiceBatchGetUserInfoResult, false),
		"GetRelationFollowList":   kitex.NewMethodInfo(getRelationFollowListHandler, newUserServiceGetRelationFollowListArgs, newUserServiceGetRelationFollowListResult, false),
		"GetRelationFollowerList": kitex.NewMethodInfo(getRelationFollowerListHandler, newUserServiceGetRelationFollowerListArgs, newUserServiceGetRelationFollowerListResult, false),
		"GetRelationFriendList":   kitex.NewMethodInfo(getRelationFriendListHandler, newUserServiceGetRelationFriendListArgs, newUserServiceGetRelationFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegisterArgs)
	realResult := result.(*user.UserServiceRegisterResult)
	success, err := handler.(user.UserService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterArgs() interface{} {
	return user.NewUserServiceRegisterArgs()
}

func newUserServiceRegisterResult() interface{} {
	return user.NewUserServiceRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginArgs)
	realResult := result.(*user.UserServiceLoginResult)
	success, err := handler.(user.UserService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return user.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return user.NewUserServiceLoginResult()
}

func batchGetUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceBatchGetUserInfoArgs)
	realResult := result.(*user.UserServiceBatchGetUserInfoResult)
	success, err := handler.(user.UserService).BatchGetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceBatchGetUserInfoArgs() interface{} {
	return user.NewUserServiceBatchGetUserInfoArgs()
}

func newUserServiceBatchGetUserInfoResult() interface{} {
	return user.NewUserServiceBatchGetUserInfoResult()
}

func getRelationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetRelationFollowListArgs)
	realResult := result.(*user.UserServiceGetRelationFollowListResult)
	success, err := handler.(user.UserService).GetRelationFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetRelationFollowListArgs() interface{} {
	return user.NewUserServiceGetRelationFollowListArgs()
}

func newUserServiceGetRelationFollowListResult() interface{} {
	return user.NewUserServiceGetRelationFollowListResult()
}

func getRelationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetRelationFollowerListArgs)
	realResult := result.(*user.UserServiceGetRelationFollowerListResult)
	success, err := handler.(user.UserService).GetRelationFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetRelationFollowerListArgs() interface{} {
	return user.NewUserServiceGetRelationFollowerListArgs()
}

func newUserServiceGetRelationFollowerListResult() interface{} {
	return user.NewUserServiceGetRelationFollowerListResult()
}

func getRelationFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetRelationFriendListArgs)
	realResult := result.(*user.UserServiceGetRelationFriendListResult)
	success, err := handler.(user.UserService).GetRelationFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetRelationFriendListArgs() interface{} {
	return user.NewUserServiceGetRelationFriendListArgs()
}

func newUserServiceGetRelationFriendListResult() interface{} {
	return user.NewUserServiceGetRelationFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *user.DouyinUserRegisterRequest) (r *user.DouyinUserRegisterResponse, err error) {
	var _args user.UserServiceRegisterArgs
	_args.Req = req
	var _result user.UserServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *user.DouyinUserLoginRequest) (r *user.DouyinUserLoginResponse, err error) {
	var _args user.UserServiceLoginArgs
	_args.Req = req
	var _result user.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetUserInfo(ctx context.Context, req *user.DouyinBatchGetUserRequest) (r *user.DouyinBatchGetUserResponse, err error) {
	var _args user.UserServiceBatchGetUserInfoArgs
	_args.Req = req
	var _result user.UserServiceBatchGetUserInfoResult
	if err = p.c.Call(ctx, "BatchGetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelationFollowList(ctx context.Context, req *user.DouyinGetRelationFollowListRequest) (r *user.DouyinGetRelationFollowListResponse, err error) {
	var _args user.UserServiceGetRelationFollowListArgs
	_args.Req = req
	var _result user.UserServiceGetRelationFollowListResult
	if err = p.c.Call(ctx, "GetRelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelationFollowerList(ctx context.Context, req *user.DouyinGetRelationFollowerListRequest) (r *user.DouyinGetRelationFollowerListResponse, err error) {
	var _args user.UserServiceGetRelationFollowerListArgs
	_args.Req = req
	var _result user.UserServiceGetRelationFollowerListResult
	if err = p.c.Call(ctx, "GetRelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelationFriendList(ctx context.Context, req *user.DouyinGetRelationFriendListRequest) (r *user.DouyinGetRelationFriendListResponse, err error) {
	var _args user.UserServiceGetRelationFriendListArgs
	_args.Req = req
	var _result user.UserServiceGetRelationFriendListResult
	if err = p.c.Call(ctx, "GetRelationFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
